# ---------------------------------------------------------------
# Custom Aliases and Functions
# ---------------------------------------------------------------
# Purpose:
# This `.aliases` file provides a range of command aliases and functions
# to streamline frequently used commands. It covers general shortcuts,
# `kubectl` commands for Kubernetes, `git` commands for version control,
# `npm` for Node.js package management, and Windows terminal shortcuts.

# Usage:
# Place this file as `.aliases` in the home directory and source it in `.bashrc` or `.zshrc`.
# For additional custom aliases, add them in `.custom_alias.sh` as suggested, to avoid modifying this core file.
# ---------------------------------------------------------------

# General Aliases
alias c='clear'
alias ls='ls --color -alh'
alias stowall="cd ~/dotfiles && stow *"
alias unstow="stow -D"
alias stowls="stow --no -v"
alias vsc="code  "                                                                          # Open VSCode in current directory
alias kill-tmux="rm -rf ~/.local/share/tmux/resurrect ~/.tmux/resurrect; tmux kill-server;" # Kill tmux and remove resurrect files

# ------------------------------------------------------------------------------
# Aliases for Convenient Usage (Optional)
# ------------------------------------------------------------------------------
# If you want to replace or augment existing commands with the new tools:
if command -v bat &>/dev/null; then
  alias cat="bat --paging=never"
fi

# Check if 'eza' exists before aliasing 'ls'
if command -v eza &>/dev/null; then
  alias ls="eza -lhagH --color=auto --group-directories-first --icons --sort=filename"
fi

# Check if 'rg' (ripgrep) exists before aliasing 'grep'
if command -v rg &>/dev/null; then
  alias grep="rg --color=auto --hidden --smart-case"
fi

# Check if 'fd' exists before aliasing 'find'
if command -v fd &>/dev/null; then
  alias find="fd --hidden --exclude .git --exclude node_modules --exclude .pnpm-store --exclude .yarn --exclude yarn-cache --exclude .yarnrc --exclude .pnp.cjs --exclude .pnp.js --exclude .pnp.loader.mjs --exclude .next --exclude out --exclude dist --exclude build"
fi

# ---------------------------------------------------------------
# Kubectl Aliases
# ---------------------------------------------------------------
alias k=kubectl
alias kca='kubectl --all-namespaces' # Use across all namespaces
alias kaf='kubectl apply -f'         # Apply resources
alias keti='kubectl exec -t -i'      # Execute in pod
alias kcuc='kubectl config use-context'
alias kgs='kubectl get svc'
alias kgp='kubectl get pods'
alias kl='kubectl logs'
alias kpf="kubectl port-forward"
alias kgi='kubectl get ingress'
alias kgcm='kubectl get configmaps'
alias kgsec='kubectl get secret'
alias kgd='kubectl get deployment'
alias kgss='kubectl get statefulset'
alias kgno='kubectl get nodes'
alias kgpvc='kubectl get pvc'
alias kgds='kubectl get daemonset'
alias kgcj='kubectl get cronjob'
alias kgj='kubectl get job'
alias kgns='kubectl get namespaces'

# Specialized Kubectl commands with options
alias kgpa='kubectl get pods --all-namespaces'
alias kgpwide='kubectl get pods -o wide'
alias kgswide='kubectl get svc -o wide'
alias kga='kubectl get all'
alias kgaa='kubectl get all --all-namespaces'
alias klf='kubectl logs -f' # Follow logs
alias kl1h='kubectl logs --since 1h'
alias kl1m='kubectl logs --since 1m'
alias klf1h='kubectl logs --since 1h -f'

# ---------------------------------------------------------------
# Git Aliases
# ---------------------------------------------------------------
alias g='git'
alias ga='git add'
alias gaa='git add --all'
alias gco='git checkout'
alias gc='git commit -v'
alias gca='git commit -v --all'
alias gcm='git commit -m'
alias gp='git push'
alias gl='git pull'
alias gst='git status'
alias gcl='git clone --recurse-submodules'
alias gcf='git config --list'
alias grb='git rebase'
alias gpr='git pull --rebase'
alias gpsup='git push --set-upstream origin $(git symbolic-ref --short HEAD)'

# Git Log
alias glgg='git log --graph'
alias glola='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset" --all'
alias glo='git log --oneline --decorate'
alias glod='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset"'

# Git Worktree Management
alias gwt='git worktree'
alias gwta='git worktree add'
alias gwtls='git worktree list'

# ---------------------------------------------------------------
# npm Aliases
# ---------------------------------------------------------------
alias npmg='npm install -g'
alias npmS='npm install -S'
alias npmD='npm install -D'
alias npmF='npm install -f'
alias npmL='npm list'
alias npmL0='npm ls --depth=0'
alias npmrd='npm run dev'
alias npmt='npm test'
alias npmR='npm run'
alias npmst='npm start'
alias npmU='npm update'
alias npmP='npm publish'

# ---------------------------------------------------------------
# Windows Terminal Aliases (for Windows)
# ---------------------------------------------------------------
# Check if running in Git Bash or WSL
if [[ "$MSYSTEM" == "MINGW64" || "$MSYSTEM" == "MINGW32" || "$(uname -r)" == *"WSL"* ]]; then
  # If running in WSL, convert paths to Windows format
  if grep -qi "WSL" /proc/version; then
    alias new='wt.exe -w 0 -d "$(wslpath -w "$(pwd)")"'
    alias V='wt.exe sp -d "$(wslpath -w "$(pwd)")" -V'
    alias H='wt.exe sp -d "$(wslpath -w "$(pwd)")" -H'
  else
    alias new='wt.exe -w 0 -d "$(pwd)"'
    alias V='wt.exe sp -d "$(pwd)" -V'
    alias H='wt.exe sp -d "$(pwd)" -H'
    alias cmd='start "" "C:\Windows\system32\cmd.exe"'
    alias bash='start "" "C:\Program Files\Git\git-bash.exe"'
  fi

  # Common aliases for both Git Bash and WSL
  alias open='explorer .'
fi

# ---------------------------------------------------------------
# Path Settings
# ---------------------------------------------------------------
export PATH=$PATH:"~/bin":"~/.local/bin"

# ---------------------------------------------------------------
# Custom Functions
# ---------------------------------------------------------------

# Function to delete branch locally and remotely
function delete_branch() {
  branch=$1
  # Check if branch exists locally
  if git show-ref --verify --quiet refs/heads/$branch; then
    # Delete branch locally
    echo -e "Deleting $branch from local repo"
    git branch -d $branch
  fi

  # Check if branch exists on remote
  if git ls-remote --heads origin $branch | grep $branch; then
    # Delete branch on remote
    echo -e "Deleting $branch from remote repo \n"
    git push origin --delete $branch
  fi
}

function gitworktree_add() {
  # Variables
  BRANCH_NAME=$1
  WORKTREE_PATH="../$BRANCH_NAME"

  # Find the root of the git repository
  GIT_ROOT=$(git rev-parse --show-toplevel)

  # Convert to Windows path format if on Git Bash or Cygwin on Windows
  case "$(uname -s)" in
  MINGW* | CYGWIN*)
    GIT_ROOT=$(cygpath -u "$GIT_ROOT")
    ;;
  esac

  # Check if we are inside a git repository
  if [ -z "$GIT_ROOT" ]; then
    echo "Error: This command must be run inside a git repository."
    return 1
  fi

  cd "$GIT_ROOT"

  # Check if the branch exists remotely
  REMOTE_BRANCH=$(git ls-remote --heads origin "$BRANCH_NAME")

  if [ -z "$REMOTE_BRANCH" ]; then
    # If the branch doesn't exist remotely, create a new branch from the current branch
    echo "Branch '$BRANCH_NAME' does not exist remotely. Creating a new branch..."
    git checkout -b "$BRANCH_NAME"
    git push -u origin "$BRANCH_NAME"
  else
    # If the branch exists remotely, set it up locally
    echo "Branch '$BRANCH_NAME' exists remotely. Setting up locally..."
    git fetch origin "$BRANCH_NAME:$BRANCH_NAME"
  fi

  # Add the worktree for the specified branch from the Git root
  git worktree add -B "$WORKTREE_PATH" "$BRANCH_NAME"

  cd "$WORKTREE_PATH"

  echo "Worktree added for branch '$BRANCH_NAME'."
}

function gac() {
  if [ $# -eq 0 ] || [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    # displays help with
    # gac | gac -h | gac --help
    echo "------"
    echo "Cannot commit without comments. Semantic reminder:"
    echo "chore:        c"
    echo "docs:         d"
    echo "feat:         f"
    echo "refactor:     r"
    echo "style:        s"
    echo "test:         t"
    echo "fix:          x"
    echo "perf:         p"
    echo "ci:           i"
    echo "build:        b"
    echo "revert:       v"
    echo "security:     sec"
    echo "localization: l10n"
    echo "internationalization: i18n"
    echo "------"
    echo "Use -a to amend the previous commit."
    return 1
  fi

  AMEND=false

  if [ "$1" = "-a" ]; then
    AMEND=true
    shift
  fi

  SHORTCUT=$1
  shift
  COMMENT=$@

  case "$SHORTCUT" in
  c) SHORTCUT="chore:" ;;
  d) SHORTCUT="docs:" ;;
  f) SHORTCUT="feat:" ;;
  r) SHORTCUT="refactor:" ;;
  s) SHORTCUT="style:" ;;
  t) SHORTCUT="test:" ;;
  x) SHORTCUT="fix:" ;;
  p) SHORTCUT="perf:" ;;                    # Performance improvements
  i) SHORTCUT="ci:" ;;                      # Continuous Integration changes
  b) SHORTCUT="build:" ;;                   # Build system changes
  v) SHORTCUT="revert:" ;;                  # Revert previous commits
  sec) SHORTCUT="security:" ;;              # Security updates
  l10n) SHORTCUT="localization:" ;;         # Localization updates
  i18n) SHORTCUT="internationalization:" ;; # Internationalization changes
  esac

  git add -A

  if [ "$AMEND" = true ]; then
    git commit --amend -m "$SHORTCUT $COMMENT"
  else
    git commit -m "$SHORTCUT $COMMENT"
  fi

  return 1
}
